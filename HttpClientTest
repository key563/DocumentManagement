package com.hikvision.demo;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.security.MessageDigest;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;

import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.CharsetUtils;
import org.apache.http.util.EntityUtils;
import org.junit.Test;

import com.alibaba.fastjson.JSONObject;

/**
 * HttpClient请求demo
 * 
 *
 */
public class InterfaceTestDemo {

	private String appkey = "f8524632";
	private String secret = "0a5a6558a06546088da645b5f9248a3a";
	private String time = new Date().getTime() + "";
	private static SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	private String picNet = "http://fj2.eastday.com/hdqxb2013/20130823_7/node757990/images/02347082.jpg";
	private String picLocal = "d:/20170310.jpg";
	// 人脸应用管理平台的ip
	private String serverIp = "10.11.82.248";
	// 人脸应用管理平台的端口
	private String serverPort = "80";

	public static void main(String[] args) {
		InterfaceTestDemo a = new InterfaceTestDemo();
		
		// 查询所有人员库
		// a.testGetAllLib();
		
		// 添加用户
		// a.testAddFaceInfoByPicIO();
		
		// 修改用户
		// a.testEditFaceInfoByPicIO();

		// 删除用户
		// a.testDelFaceInfo();

		// 上传两个文件进行1V1比对
		// a.testImageCompareByImage();

		// 抓拍库以图搜图 1VN
		// a.testSearchSnap();

		// 静态库以图搜图 1VN
		// a.testSearchHuman();

		// 黑名单库以图搜图1VN
		// a.testSearchBlack();
		
		// 获取图片人脸模型
		// a.testFaceModel();
		
		// 黑名单库以模型搜图
		a.testStaticModel();
	}

	/**
	 * get请求 获取所有人员库信息
	 */
	@Test
	public void testGetAllLib() {
		CloseableHttpClient httpClient = HttpClients.createDefault();
		String url = "";
		if(serverPort.equals("80")) {
			url = "http://"+ serverIp + "/vip/manager/facelib/alllib";
		} else {
			url = "http://"+ serverIp + ":" + serverPort + "/vip/manager/facelib/alllib";
		}
		HttpGet httpGet = new HttpGet(url);
		HttpEntity entity = null;
		try {
			// 执行发送请求,并获取返回值
			CloseableHttpResponse response = httpClient.execute(httpGet);
			entity = response.getEntity();
			if (entity != null) {
				System.out.println("response_length: " + entity.getContentLength());
				System.out.println("response: " + EntityUtils.toString(entity, Charset.defaultCharset()));
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * get请求 获取指定人员信息
	 */
	@Test
	public void testGetOneLib() {
		String name = "张三" + new Random().nextInt(10);
		HttpEntity entity = null;
		try {
			String token = md5x32Code("/vip/manager/face/query" + "certificateNumber=610115199802021121&name=" + name
					+ "&appkey=" + appkey + "&time=" + time + secret);
			CloseableHttpClient httpClient = HttpClients.createDefault();
			// name = URLEncoder.encode(name, "UTF-8");
			String url = "http://10.11.80.102/vip/manager/face/query?certificateNumber=610115199802021121&name=" + name
					+ "&appkey=" + appkey + "&time=" + time + "&token=" + token;
			HttpGet httpGet = new HttpGet(url);
			// 执行发送请求,并获取返回值
			CloseableHttpResponse response = httpClient.execute(httpGet);

			entity = response.getEntity();
			if (entity != null) {
				System.out.println("response_length: " + entity.getContentLength());
				System.out.println("response: " + EntityUtils.toString(entity, Charset.defaultCharset()));
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 添加人脸信息/faceURL方式
	 */
	@Test
	public void testAddFaceInfoByPicURL() {
		CloseableHttpClient httpClient = HttpClients.createDefault();
		String url = "";
		if(serverPort.equals("80")) {
			url = "http://"+ serverIp + "/vip/manager/face/add";
		} else {
			url = "http://"+ serverIp + ":" + serverPort + "/vip/manager/face/add";
		}
		try {
			HttpPost httpPost = new HttpPost(url);
			
			List<NameValuePair> pairList = new ArrayList<NameValuePair>();
			BasicNameValuePair faceURL = new BasicNameValuePair("faceURL", picNet);
			BasicNameValuePair libId = new BasicNameValuePair("libId", "3");
			BasicNameValuePair name = new BasicNameValuePair("name", URLEncoder.encode("张三", "UTF-8"));
			BasicNameValuePair sex = new BasicNameValuePair("sex", "1");
			BasicNameValuePair birthday = new BasicNameValuePair("birthday", dateFormat.format(new Date()));
			BasicNameValuePair certificateNumber = new BasicNameValuePair("certificateNumber", "61011519980202112");
			BasicNameValuePair customInfo = new BasicNameValuePair("customInfo", "测试");
			pairList.add(faceURL);
			pairList.add(libId);
			pairList.add(name);
			pairList.add(sex);
			pairList.add(birthday);
			pairList.add(certificateNumber);
			pairList.add(customInfo);
			UrlEncodedFormEntity formEntity = new UrlEncodedFormEntity(pairList);
			
			httpPost.setEntity(formEntity);
			// 执行发送请求,并获取返回值
			CloseableHttpResponse response = httpClient.execute(httpPost);

			HttpEntity entity2 = response.getEntity();
			if (entity2 != null) {
				System.out.println("response_length: " + entity2.getContentLength());
				System.out.println("response: " + EntityUtils.toString(entity2, Charset.defaultCharset()));
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 添加人脸信息/二进制方式
	 */
	@Test
	public void testAddFaceInfoByPicIO() {
		CloseableHttpClient httpClient = HttpClients.custom().build();
		String url = "";
		if(serverPort.equals("80")) {
			url = "http://"+ serverIp + "/vip/face/add";
		} else {
			url = "http://"+ serverIp + ":" + serverPort + "/vip/face/add";
		}
		try {
			MultipartEntityBuilder builder = MultipartEntityBuilder.create();
			File image = new File(picLocal);
			
			builder.addTextBody("libId", "3");
			builder.addTextBody("name", URLEncoder.encode("张三", "UTF-8"));
			builder.addTextBody("sex", "1");
			builder.addTextBody("birthday", dateFormat.format(new Date()));
			builder.addTextBody("certificateNumber", "61011519980202142");
			builder.addTextBody("customInfo", "测试");
			builder.addPart("picture", new FileBody(image, ContentType.create("image/jpeg"), image.getName()));
			
			HttpPost httpPost = new HttpPost(url);
			httpPost.setEntity(builder.build());
			// 执行发送请求,并获取返回值
			CloseableHttpResponse response = httpClient.execute(httpPost);

			HttpEntity entity2 = response.getEntity();
			if (entity2 != null) {
				System.out.println("response_length: " + entity2.getContentLength());
				System.out.println("response: " + EntityUtils.toString(entity2, Charset.defaultCharset()));
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 修改人脸信息/faceURL方式
	 */
	@Test
	public void testEditFaceInfoByPicURL() {
		
		CloseableHttpClient httpClient = HttpClients.createDefault();
		String url = "";
		if(serverPort.equals("80")) {
			url = "http://"+ serverIp + "/vip/manager/face/edit";
		} else {
			url = "http://"+ serverIp + ":" + serverPort + "/vip/manager/face/edit";
		}
		try {
			HttpPost httpPost = new HttpPost(url);
			
			List<NameValuePair> pairList = new ArrayList<NameValuePair>();
			BasicNameValuePair faceId = new BasicNameValuePair("faceId", "4");
			BasicNameValuePair faceURL = new BasicNameValuePair("faceURL", picNet);
			BasicNameValuePair libId = new BasicNameValuePair("libId", "3");
			BasicNameValuePair name = new BasicNameValuePair("name", URLEncoder.encode("张三", "UTF-8"));
			BasicNameValuePair sex = new BasicNameValuePair("sex", "1");
			BasicNameValuePair birthday = new BasicNameValuePair("birthday", dateFormat.format(new Date()));
			BasicNameValuePair certificateNumber = new BasicNameValuePair("certificateNumber", "61011519980202111");
			BasicNameValuePair customInfo = new BasicNameValuePair("customInfo", "测试");
			pairList.add(faceId);
			pairList.add(faceURL);
			pairList.add(libId);
			pairList.add(name);
			pairList.add(sex);
			pairList.add(birthday);
			pairList.add(certificateNumber);
			pairList.add(customInfo);
			UrlEncodedFormEntity formEntity = new UrlEncodedFormEntity(pairList);
			
			httpPost.setEntity(formEntity);
			// 执行发送请求,并获取返回值
			CloseableHttpResponse response = httpClient.execute(httpPost);

			HttpEntity entity2 = response.getEntity();
			if (entity2 != null) {
				System.out.println("response_length: " + entity2.getContentLength());
				System.out.println("response: " + EntityUtils.toString(entity2, Charset.defaultCharset()));
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 修改人脸信息/二进制方式
	 */
	@Test
	public void testEditFaceInfoByPicIO() {
		CloseableHttpClient httpClient = HttpClients.custom().build();
		String url = "";
		if(serverPort.equals("80")) {
			url = "http://"+ serverIp + "/vip/face/edit";
		} else {
			url = "http://"+ serverIp + ":" + serverPort + "/vip/face/edit";
		}
		try {
			MultipartEntityBuilder builder = MultipartEntityBuilder.create();
			File image = new File(picLocal);
			
			builder.addTextBody("faceId", "6");
			builder.addTextBody("name", URLEncoder.encode("张三", "UTF-8"));
			builder.addTextBody("sex", "1");
			builder.addTextBody("birthday", dateFormat.format(new Date()));
			builder.addTextBody("certificateNumber", "61011519980202141");
			builder.addTextBody("customInfo", "测试");
			builder.addPart("picture", new FileBody(image, ContentType.create("image/jpeg"), image.getName()));
			
			HttpPost httpPost = new HttpPost(url);
			httpPost.setEntity(builder.build());
			// 执行发送请求,并获取返回值
			CloseableHttpResponse response = httpClient.execute(httpPost);

			HttpEntity entity2 = response.getEntity();
			if (entity2 != null) {
				System.out.println("response_length: " + entity2.getContentLength());
				System.out.println("response: " + EntityUtils.toString(entity2, Charset.defaultCharset()));
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 删除
	 */
	@Test
	public void testDelFaceInfo() {
		CloseableHttpClient httpClient = HttpClients.createDefault();
		String url = "";
		if(serverPort.equals("80")) {
			url = "http://"+ serverIp + "/vip/manager/face/del?faceId=4,5";
		} else {
			url = "http://"+ serverIp + ":" + serverPort + "/vip/manager/face/del?faceId=4,5";
		}
		HttpGet httpGet = new HttpGet(url);
		try {
			// 执行发送请求,并获取返回值
			CloseableHttpResponse response = httpClient.execute(httpGet);

			HttpEntity entity2 = response.getEntity();
			if (entity2 != null) {
				System.out.println("response_length: " + entity2.getContentLength());
				System.out.println("response: " + EntityUtils.toString(entity2, Charset.defaultCharset()));
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 推送至第三方平台
	 */
	@Test
	public void pushToThird() {
		JSONObject json = new JSONObject();
		json.put("certificateNumber", "61011519980202112" + new Random().nextInt(10));
		json.put("ip", "10.16.33.205");
		json.put("regionName", "区域二");
		json.put("captureTime", "2017-12-12 10:23:45");
		json.put("appkey", appkey);
		json.put("time", new Date().getTime());
		String token = md5x32Code("/vip/manager/face/add" + json.toString() + secret);
		CloseableHttpClient httpClient = HttpClients.createDefault();
		String url = "http://10.11.80.102/vip/manager/face/add?token=" + token;
		HttpPost httpPost = new HttpPost(url);
		HttpEntity entity = null;
		String vipInfolog_getFile_server_ip = "10.16.34.97";
		String vipInfolog_getFile_server_port = "6501";
		String vipInfolog_getAlarm_img_id = "/pic?0dd780z74-=s08318353ee2=t1i8m*=p1p1i=d1s*i5d9d*=*2b0i64e2439e0acd5--a16197-a40i30a*e835i60=";

		try {
			URL url2 = new URL("http://" + vipInfolog_getFile_server_ip + ":" + vipInfolog_getFile_server_port
					+ vipInfolog_getAlarm_img_id);
			MultipartEntityBuilder builder = MultipartEntityBuilder.create();
			builder.addBinaryBody("file", url2.openStream(), ContentType.MULTIPART_FORM_DATA, "image.jpeg");// 本地文件上传
			ContentType textType = ContentType.create("text/plain", Charset.forName("utf-8"));
			ContentType jsonType = ContentType.create("text/json", Charset.forName("utf-8"));
			builder.addTextBody("captureImage", "image.jpeg", textType);// 类似浏览器表单提交，对应input的name和value
			builder.addTextBody("ocxResult", json.toString(), jsonType);
			entity = builder.setCharset(CharsetUtils.get("utf-8")).setMode(HttpMultipartMode.BROWSER_COMPATIBLE)
					.build();
			httpPost.setEntity(entity);
			// 执行发送请求,并获取返回值
			CloseableHttpResponse response = httpClient.execute(httpPost);

			HttpEntity entity2 = response.getEntity();
			if (entity2 != null) {
				System.out.println("response_length: " + entity2.getContentLength());
				System.out.println("response: " + EntityUtils.toString(entity2, Charset.defaultCharset()));
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 上传两个文件进行1V1比对
	 * 
	 */
	public void testImageCompareByImage() {
		CloseableHttpClient httpClient = HttpClients.custom().build();
		String url = "";
		if(serverPort.equals("80")) {
			url = "http://"+ serverIp + "/vip/image/analysis/compare";
		} else {
			url = "http://"+ serverIp + ":" + serverPort + "/vip/image/analysis/compare";
		}
		HttpPost httpPost = new HttpPost(url);
		File uploadFile1 = new File(picLocal);
		File uploadFile2 = new File(picLocal);

		MultipartEntityBuilder builder = MultipartEntityBuilder.create();
		builder.addPart("srcImage", new FileBody(uploadFile1, ContentType.create("image/jpeg"), uploadFile1.getName()));
		builder.addPart("destImage", new FileBody(uploadFile2, ContentType.create("image/jpeg"), uploadFile2.getName()));

		try {
			httpPost.setEntity(builder.build());
			CloseableHttpResponse response = httpClient.execute(httpPost);
			HttpEntity entity = response.getEntity();
			String result = EntityUtils.toString(entity);
			System.out.println(result);
			httpClient.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 通过两张图片的url进行1V1比对
	 * 
	 */
	public void testImageCompareByUrl() {
		CloseableHttpClient httpClient = HttpClients.custom().build();
		String url = "";
		if(serverPort.equals("80")) {
			url = "http://"+ serverIp + "/vip/image/analysis/compare";
		} else {
			url = "http://"+ serverIp + ":" + serverPort + "/vip/image/analysis/compare";
		}
		try {
			HttpPost httpPost = new HttpPost(url);
			List<NameValuePair> pairList = new ArrayList<NameValuePair>();
			BasicNameValuePair srcUrl = new BasicNameValuePair("srcUrl", "http://10.40.226.134:6501/pic?=d8=i241z65e3s052-811e1b-1a48ac2e2bc5fcieb2*=0d3i3s1*=idp2*=*d1i7t=pe1m0720e876-1131*1-35i137d9e27");
			BasicNameValuePair destUrl = new BasicNameValuePair("destUrl", "http://10.40.226.166:6501/pic?0dd783i74-e*48319513em3ep=t8i9d*=*4pdi=*1s1i4d7=*2b0i64e2439e0acd5--a16577-a20s30a5z035i=7=");
			pairList.add(srcUrl);
			pairList.add(destUrl);
			UrlEncodedFormEntity entity = new UrlEncodedFormEntity(pairList);
			httpPost.setEntity(entity);
			CloseableHttpResponse response = httpClient.execute(httpPost);
			HttpEntity entity1 = response.getEntity();
			String result = EntityUtils.toString(entity1);
			System.out.println(result);
			httpClient.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 抓拍库以图搜图 1VN
	 * 
	 */
	public void testSearchSnap() {
		
		JSONObject params = new JSONObject();
		params.put("beginDate", "2018-01-01 00:00:00");
		params.put("endDate", "2018-06-23 23:00:00");
		params.put("similarityMin", "0.3");
		params.put("similarityMax", "1.0");
		params.put("resultSize", "100");

		String url = "";
		if(serverPort.equals("80")) {
			url = "http://"+ serverIp + "/vip/image/analysis/searchsnap";
		} else {
			url = "http://"+ serverIp + ":" + serverPort + "/vip/image/analysis/searchsnap";
		}
		try {
			CloseableHttpClient httpClient = HttpClients.custom().build();
			File uploadFile1 = new File(picLocal);

			MultipartEntityBuilder builder = MultipartEntityBuilder.create();
			builder.addPart("picture", new FileBody(uploadFile1, ContentType.create("image/jpeg"), uploadFile1.getName()));
			builder.addTextBody("beginDate", "2018-01-01 00:00:00");
			builder.addTextBody("endDate", "2018-06-23 00:00:00");
			builder.addTextBody("similarityMin", "0.5");
			builder.addTextBody("resultSize", "100");
			
			HttpPost httpPost = new HttpPost(url);
			httpPost.setEntity(builder.build());

			CloseableHttpResponse response = httpClient.execute(httpPost);
			HttpEntity entity = response.getEntity();
			String result = EntityUtils.toString(entity);
			System.out.println(result);
			httpClient.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 静态库以图搜图1VN
	 * 
	 */
	public void testSearchHuman() {
		String url = "";
		if(serverPort.equals("80")) {
			url = "http://"+ serverIp + "/vip/image/analysis/searchhuman";
		} else {
			url = "http://"+ serverIp + ":" + serverPort + "/vip/image/analysis/searchhuman";
		}
		try {
			CloseableHttpClient httpClient = HttpClients.custom().build();
			File uploadFile1 = new File(picLocal);

			MultipartEntityBuilder builder = MultipartEntityBuilder.create();
			builder.addPart("picture", new FileBody(uploadFile1, ContentType.create("image/jpeg"), uploadFile1.getName()));
			builder.addTextBody("similarityMin", "0.5");
			builder.addTextBody("resultSize", "10");
			
			HttpPost httpPost = new HttpPost(url);
			httpPost.setEntity(builder.build());

			CloseableHttpResponse response = httpClient.execute(httpPost);
			HttpEntity entity = response.getEntity();
			String result = EntityUtils.toString(entity);
			System.out.println(result);
			httpClient.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 黑名单库以图搜图1VN
	 * 
	 */
	public void testSearchBlack() {

		String url = "";
		if(serverPort.equals("80")) {
			url = "http://"+ serverIp + "/vip/image/analysis/searchblack";
		} else {
			url = "http://"+ serverIp + ":" + serverPort + "/vip/image/analysis/searchblack";
		}
		try {
			CloseableHttpClient httpClient = HttpClients.custom().build();
			File uploadFile1 = new File(picLocal);

			MultipartEntityBuilder builder = MultipartEntityBuilder.create();
			builder.addPart("picture", new FileBody(uploadFile1, ContentType.create("image/jpeg"), uploadFile1.getName()));
			builder.addTextBody("similarityMin", "0.5");
			builder.addTextBody("resultSize", "10");
			
			HttpPost httpPost = new HttpPost(url);
			httpPost.setEntity(builder.build());

			CloseableHttpResponse response = httpClient.execute(httpPost);
			HttpEntity entity = response.getEntity();
			String result = EntityUtils.toString(entity);
			System.out.println(result);
			httpClient.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void testFaceModel() {
		try {
			CloseableHttpClient httpClient = HttpClients.custom().build();
			String url = "";
			if(serverPort.equals("80")) {
				url = "http://"+ serverIp + "/vip/manager/analysis/facemodel";
			} else {
				url = "http://"+ serverIp + ":" + serverPort + "/vip/manager/analysis/facemodel";
			}
			HttpPost httpPost = new HttpPost(url);
			File uploadFile = new File(picLocal);

			MultipartEntityBuilder builder = MultipartEntityBuilder.create();

			builder.addPart("picture", new FileBody(uploadFile, ContentType.create("image/jpeg"), uploadFile.getName()));
			builder.addTextBody("name", "name");

			httpPost.setEntity(builder.build());

			CloseableHttpResponse response = httpClient.execute(httpPost);
			HttpEntity entity = response.getEntity();
			String result = EntityUtils.toString(entity);
			System.out.println(result);
			httpClient.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void testStaticModel() {
		try {
			CloseableHttpClient httpClient = HttpClients.custom().build();
			String url = "";
			if(serverPort.equals("80")) {
				url = "http://"+ serverIp + "/vip/image/analysis/humanmodel";
			} else {
				url = "http://"+ serverIp + ":" + serverPort + "/vip/image/analysis/humanmodel";
			}
			HttpPost httpPost = new HttpPost(url);
			
			List<NameValuePair> pairList = new ArrayList<NameValuePair>();
			BasicNameValuePair similarityMin = new BasicNameValuePair("similarityMin", "0.8");
			BasicNameValuePair model = new BasicNameValuePair("model", "SElLREZSMzAwAAAAAAAAAB4/Ae7y8BBP3yHD8f4iHvzB4O7xAO0D8R4A/y48ESD9Hj/zPj7w4AACAi8iEAKwPgARQP0CMRxePwAB7P//Lx4gLeLw8fPvH/7yL8Qu0FEx4PLu3vBB4D6v0OEeMCPS8CEe7gAhzw4A4A/iPVEqFO8v8BP0/lwSNfzPD8DxBf//TAEBbwA+AADwLw4AAP8QwdPxAD+x/vAR/wAP0/4hJOX0Ah7WL+ESPjMf/hFRzczfIc8BDQ+94w4T/yIP7xAQEfACLyHRFOACIRHw0eMfEBHxAxAPTELkHAIPEDAAGgABwSQBvh8vTiT0wRPxPvcOIMARABDQHzETHx7vL+4C4BwSMBsPHS/1EPEOLB8ELt/tD+4e4FAC3iDwEi3PAfCtEBHOzz8SvfBf8iAPL//9HeLR48DiPAAz8z7jD+Tk/+sCAi8O6+0CAP8h/vTQ4QAEDuQRDhLvAM794hIl/vQvANAgHQMBAPAC8tAfHw8TLxHh4jA+HDASEMHu4wIf4sDwwPD/8hP9AfIQLzETAQLgIu0P8u0OIfIiD7AzEPUfLfTf0NHT7zRO3+1AAN8R8A4eHxMfbu3DzjBC3PIBv+/w8RLhAhwgEbIQ9O8B8/LgI0AF4x5OACEC8C3j7/EA8fETveDiAQPvETE/DvIAwSNBIvAb/REA4eECAd5OP7Lx9PT0OAAdBg4A");
			pairList.add(similarityMin);
			pairList.add(model);
			
			UrlEncodedFormEntity formEntity = new UrlEncodedFormEntity(pairList);

			httpPost.setEntity(formEntity);

			CloseableHttpResponse response;
			response = httpClient.execute(httpPost);
			HttpEntity entity = response.getEntity();
			String result = EntityUtils.toString(entity);
			System.out.println(result);
			httpClient.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 32位MD5加密
	 * 
	 * @param password
	 * @return
	 */
	public static String md5x32Code(String password) {
		try {
			MessageDigest md = MessageDigest.getInstance("MD5");
			md.update(password.getBytes("utf-8"));
			byte[] b = md.digest();
			StringBuilder builder = new StringBuilder("");
			for (int offset = 0; offset < b.length; offset++) {
				int i = b[offset];
				if (i < 0) {
					i += 256;
				}
				if (i < 16) {
					builder.append("0");
				}
				builder.append(Integer.toHexString(i));
			}
			password = builder.toString();
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("MD5加密异常");
		}
		return password;
	}

}
